//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_LoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.Loader), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("TextureLoad", TextureLoad);
		L.RegFunction("Preload", Preload);
		L.RegFunction("WWWLoad", WWWLoad);
		L.RegFunction("Load", Load);
		L.RegFunction("CreateGameObject", CreateGameObject);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("loadSprite", loadSprite);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("getSprite", getSprite);
		L.RegFunction("LoadGameObject", LoadGameObject);
		L.RegFunction("LoadMaterial", LoadMaterial);
		L.RegFunction("LoadAudioClip", LoadAudioClip);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("it", get_it, null);
		L.RegVar("path", get_path, null);
		L.RegFunction("PreloadCallback", Game_Loader_PreloadCallback);
		L.RegFunction("WWWCallback", Game_Loader_WWWCallback);
		L.RegFunction("WWWProgress", Game_Loader_WWWProgress);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.TextureLoad(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Preload(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(Game.Loader.PreloadCallback)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Game.Loader.PreloadCallback arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (Game.Loader.PreloadCallback)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.PreloadCallback), func) as Game.Loader.PreloadCallback;
				}

				obj.Preload(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaFunction)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				obj.Preload(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Loader.Preload");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WWWLoad(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.WWWLoad(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(string)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				obj.WWWLoad(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaTable)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				LuaTable arg2 = ToLua.ToLuaTable(L, 4);
				obj.WWWLoad(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				obj.WWWLoad(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(string), typeof(LuaInterface.LuaFunction), typeof(UnityEngine.WWWForm)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				UnityEngine.WWWForm arg4 = (UnityEngine.WWWForm)ToLua.ToObject(L, 6);
				obj.WWWLoad(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Loader.WWWLoad");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(Game.Loader.WWWCallback), typeof(Game.Loader.WWWProgress), typeof(UnityEngine.WWWForm)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Game.Loader.WWWCallback arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (Game.Loader.WWWCallback)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWCallback), func) as Game.Loader.WWWCallback;
				}

				Game.Loader.WWWProgress arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (Game.Loader.WWWProgress)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWProgress), func) as Game.Loader.WWWProgress;
				}

				UnityEngine.WWWForm arg3 = (UnityEngine.WWWForm)ToLua.ToObject(L, 5);
				obj.Load(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(Game.Loader.WWWCallback), typeof(string), typeof(Game.Loader.WWWProgress), typeof(UnityEngine.WWWForm)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Game.Loader.WWWCallback arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (Game.Loader.WWWCallback)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWCallback), func) as Game.Loader.WWWCallback;
				}

				string arg2 = ToLua.ToString(L, 4);
				Game.Loader.WWWProgress arg3 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (Game.Loader.WWWProgress)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg3 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWProgress), func) as Game.Loader.WWWProgress;
				}

				UnityEngine.WWWForm arg4 = (UnityEngine.WWWForm)ToLua.ToObject(L, 6);
				obj.Load(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Loader.Load");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.GameObject o = obj.CreateGameObject(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			string arg1 = ToLua.CheckString(L, 3);
			obj.LoadSprite(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			string arg1 = ToLua.CheckString(L, 3);
			System.Collections.IEnumerator o = obj.loadSprite(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			string arg1 = ToLua.CheckString(L, 3);
			obj.GetSprite(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			string arg1 = ToLua.CheckString(L, 3);
			System.Collections.IEnumerator o = obj.getSprite(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.LoadGameObject(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(UnityEngine.Transform), typeof(string), typeof(LuaInterface.LuaFunction)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				obj.LoadGameObject(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Game.Loader), typeof(string), typeof(LuaInterface.LuaFunction), typeof(object)))
			{
				Game.Loader obj = (Game.Loader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.LoadGameObject(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Loader.LoadGameObject");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.LoadMaterial(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Game.Loader obj = (Game.Loader)ToLua.CheckObject(L, 1, typeof(Game.Loader));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.LoadAudioClip(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_it(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Game.Loader.it);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Loader obj = (Game.Loader)o;
			string ret = obj.path;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index path on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Game_Loader_PreloadCallback(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.PreloadCallback), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Game_Loader_WWWCallback(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWCallback), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Game_Loader_WWWProgress(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Game.Loader.WWWProgress), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

