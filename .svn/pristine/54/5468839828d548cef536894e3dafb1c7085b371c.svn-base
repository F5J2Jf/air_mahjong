const { ccclass, property } = cc._decorator;

import Data from "../net/Data";
import Window from "../utils/Window"
import Protocol from "../net/Protocol";
import Player from "./Player";
import Desktop from "./Desktop"
import EventHandle from "../net/EventHandle"
import { T_tile, T_state, U_room, U_room_level } from "../net/Bean";

@ccclass
export default class UI extends cc.Component {


    @property({ type: cc.Label })
    RoomId: cc.Label;
    @property({ type: cc.Label })
    remainingTile: cc.Label;
    @property({ type: cc.Label })
    level: cc.Label;

    @property({ type: cc.Node })
    PrepareBtn: cc.Node;

    eh: Array<EventHandle> = [];

    onLoad() {
        this.RoomId.string = "房间号：" + Data.it.roomCode;
        this.eh.push(T_state.table.addEventListener("insert", this.onState, this));
        this.eh.push(T_state.table.addEventListener("update", this.onState, this));
        this.eh.push(U_room.table.addEventListener("update", this.onRoom, this));
        this.State();
    }

    onState(o: T_state) {
        if (o.index == Data.it.index) {
            this.State();
        }
    }
    onRoom(room: U_room) {
        this.State();
    }

    State() {
        this.PrepareBtn.active = Desktop.it.state.state == 0 && Desktop.it.room.state == 0;
        this.level.string = "局数(" + Desktop.it.room.curLevel + "/" + Desktop.it.room.sumLevel + ")";
        this.remainingTile.string = "剩余(" + Desktop.it.room.remainingTile + ")张";
    }

    prepare() {
        Data.it.im.Call(Protocol.NCMJ_PREPARE);
    }

    exit() {
        //Data.it.im.Call(Protocol.NCMJ_EXIT, null, null, 0);
    }

    onDestroy() {
        this.eh.forEach(eh => eh.remove());
    }
}
