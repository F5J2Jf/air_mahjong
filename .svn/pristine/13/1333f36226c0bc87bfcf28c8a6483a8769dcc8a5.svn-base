var BUFFER = require("./Buffer.js");
module.exports = function (data, url) {
    var self = this;
    this.event = new cc.EventTarget();

    var PARAM_TYPE = [];

    var socket = new WebSocket(url);

    socket.onopen = function (event) {
        data.onOpen(event);
    };
    socket.onerror = function (event) {
        data.onError(event);
    };
    socket.onclose = function (event) {
        data.onClose(event);
    };

    socket.onmessage = function (e) {
        var buffer = new BUFFER(e.data);
        var code = buffer.getUByte();
        console.log(code);
        switch (code) {
            case 0:
                data.Init(buffer);
                break;
            case 1:
                data.Insert(buffer);
                break;
            case 2:
                data.Delete(buffer);
                break;
            case 3:
                data.Update(buffer);
                break;
            case 4:
                while (buffer.remaining() > 0) {
                    var c = buffer.getUByte();
                    var len = buffer.getByte();
                    var pTypes = [];
                    for (var i = 0; i < len; i++) {
                        pTypes[i] = buffer.getByte();
                    }
                    PARAM_TYPE[c] = pTypes;
                    console.log(c + "------ " + pTypes);
                }
                break;
            case 5:
                var time = buffer.getLong();
                var str = buffer.getUTF();
                console.log("TIME:" + time + " " + str);
                break;
            case 9:
                throw "ServerError:\n" + buffer.getUTF();
            default:
                self.event.emit(code, buffer);
                break;
        }

    }

    this.Call = function (code, callback, target) {
        if (callback != null) {
            this.event.once(code, callback, target);
        }
        var buffer = new BUFFER(new ArrayBuffer(256));
        buffer.putUByte(code);
        if (arguments.length > 3) {
            var param = [];
            for (var i = 3; i < arguments.length; i++) {
                param[i - 3] = arguments[i];
            }
            buffer.putArray(PARAM_TYPE[code], param);
        }
        buffer.flip();
        console.log(code + ":" + param);
        socket.send(buffer.getData());
    }

    this.close = function () {
        socket.close();
    }
}