package game.application;

import java.util.Vector;

import game.data.bean.T_state;
import game.data.bean.T_tile;
import game.room.MJ;
import game.room.Room;
import game.utils.Protocol;
import ge.annotation.RemoteMethod;
import ge.net.Application;

/**
 * 南昌麻将
 */
public class Player extends Application {
	public Room room = null;
	public int userId;
	public byte index;

	public Vector<T_tile> array = new Vector<T_tile>();
	private MJ mj;
	public T_state state;

	protected void init() {
		this.userId = UserID();
		mj = new MJ(this);
	}

	@RemoteMethod(Protocol.NCMJ_CREATE)
	public Object[] create(byte num) {
		room = new Room(userId, num);
		index = room.into(this);
		return Result(room.roomId);
	}

	@RemoteMethod(Protocol.NCMJ_INTO)
	public Object[] into(int roomId) {
		room = Room.Find(roomId);
		if (room != null) {
			index = room.into(this);
			return Result(index, room.roomId);
		}
		return Result((byte) -2);
	}

	@RemoteMethod(Protocol.NCMJ_SHUFFLE)
	public Object[] Shuffle(String s0, String s1, String s2, String s3, String c, short jing) {
		room.Shuffle(s0, s1, s2, s3, c, jing);
		return Result((byte) 0);
	}

	@RemoteMethod(Protocol.NCMJ_PREPARE)
	public Object[] prepare() {
		room.prepare(this);
		return Result(0);
	}

	public byte pr = 0;
	public boolean reply = false;
	public byte dis;

	/**
	 * 出牌
	 */
	@RemoteMethod(Protocol.NCMJ_PLAY)
	public void play(short id) {
		reply = true;
		pr = 0;
		T_tile o = room.play(this, id);
		array.remove(o);
	}

	/**
	 * 应牌
	 * 
	 * @param type:0:过,1:吃,2:碰,4:杠,8:胡
	 */
	@RemoteMethod(Protocol.NCMJ_REPLY)
	public Object[] reply(boolean selfmo, byte type, byte value) {
		if (selfmo) {// 自摸
			switch (type) {
			case 4:// 杠
				Vector<T_tile> v = mj.gang.get(value);
				for (T_tile o : v) {
					o.state = 3;
					o.update();
				}
				break;
			case 8:// 胡

				break;
			}
		} else {
			reply = true;
			pr = type;
			room.reply();
		}
		return Result(0);
	}

	/*
	 * 最高优先级被调
	 */
	public void onReply() {
		if (reply) {
			switch (pr) {
			case 0:
				// 下一轮摸牌

				break;
			case 1:

				break;
			case 2:

				break;
			case 4:

				break;
			case 8:

				break;
			}
		}
	}

	@RemoteMethod(Protocol.NCMJ_EXIT)
	public void exit(byte code) {
		clear();
		call(Protocol.NCMJ_EXIT, code);
	}

	protected void clear() {
		if (room != null) {
			room.exit(this);
			room = null;
		}
		if (state != null) {
			state.clear();
			state = null;
		}
		if (array != null) {
			array.clear();
		}
	}

	// ------------------------------------------------------------
	/*
	 * 发牌
	 */
	public void perflop(T_tile o) {
		array.add(o);
	}

	/*
	 * 自摸
	 */
	public void selfDrawn(T_tile obj) {
		perflop(obj);
		boolean gang = mj.Gang();
		boolean hu = mj.HU();
		if (hu || gang) {
			call(Protocol.NCMJ_OPTIONS, true, hu, mj.gangValue[0], mj.gangValue[1], mj.gangValue[2]);
		} else {
			room.tick.start(index);
		}
	}

	public void onPlay(T_tile obj) {
		this.dis = (byte) ((index + room.room.num - obj.index) % room.room.num);
		reply = false;
		pr = 0;

		byte chi = 0;
		if (dis == 1) {
			chi = mj.Chi(obj);
			if (chi > 0) {
				pr = 1;
			}
		}

		byte pang = mj.Pang(obj);
		if (pang > 1) {
			pr = 2;
		}
		if (pang > 2) {
			pr = 4;
		}

		boolean hu = mj.HU(obj);
		if (hu) {
			pr = 8;
		}
		if (pr > 0) {
			call(Protocol.NCMJ_OPTIONS, false, hu, obj.value, pang, chi);
		}
		System.out.println(1 + "," + hu + "," + obj.value + "," + pang + "," + chi);
	}
}
