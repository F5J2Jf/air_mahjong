package game.room;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Vector;

import game.application.Player;
import game.data.bean.T_tile;
import ge.db.Table;

public class MJ {

	private static byte[] i1 = { -2, -1, 1, 2 };
	private static byte[] i2 = { 1, 2 };
	public static byte[] TILE = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26,
			27, 28, 29, 31, 32, 33, 34, 41, 42, 43 };

	private HashMap<Integer, Boolean> tmp = new HashMap<>();
	private TT tt;
	private int num;
	private TTT[] ttts;
	private Player player;

	public MJ(Player player) {
		this.player = player;
	}

	public boolean any(T_tile a) {
		return false;
	}

	public int type(T_tile a) {
		return a.value / 10;
	}

	public boolean loop(T_tile a) {
		return a.value > 30;
	}

	private int tid(int... tiles) {
		Arrays.sort(tiles);
		int v = 0;
		for (int i : tiles) {
			v = v * 10 + i;
		}
		return v;
	}

	private boolean ttt(T_tile a, T_tile b) {
		if (type(a) == type(b)) {
			return Math.abs(a.value - b.value) <= 2 || loop(a);
		}
		return false;
	}

	private boolean ttt(T_tile a, T_tile b, T_tile c) {
		if (type(a) == type(b) && type(a) == type(c)) {
			if (a.value == b.value && a.value == c.value) {
				return true;
			} else if (a.value != b.value && a.value != c.value && b.value != c.value) {
				if (loop(a)) {
					return true;
				} else {
					return Math.max(a.value, Math.max(b.value, c.value)) == (a.value + b.value + c.value) / 3f + 1;
				}
			}
		}
		return false;
	}

	public boolean isGroup(T_tile a, T_tile b) {
		return any(a) || any(b) || a.value == b.value;
	}

	public boolean isGroup(T_tile a, T_tile b, T_tile c) {
		boolean _a = any(a);
		boolean _b = any(b);
		boolean _c = any(c);

		if (!_a && !_b && !_c) {
			return ttt(a, b, c);
		} else if (!_a && !_b && _c) {
			return ttt(a, b);
		} else if (_a && !_b && !_c) {
			return ttt(b, c);
		} else if (!_a && _b && !_c) {
			return ttt(a, c);
		} else {
			return true;
		}
	}

	private ArrayList<TT> TTs(Vector<T_tile> tiles) {
		tmp.clear();
		ArrayList<TT> arr = new ArrayList<>();
		int len = tiles.size();
		for (int i = 0; i < len; i++) {
			T_tile a = tiles.get(i);
			for (int j = i + 1; j < len; j++) {
				T_tile b = tiles.get(j);
				int sid = tid(a.value, b.value);
				if (!tmp.containsKey(sid)) {
					if (isGroup(a, b)) {
						tmp.put(sid, true);
						arr.add(new TT(a, b));
					}
				}
			}
		}
		return arr;
	}

	private ArrayList<TTT> TTTs(ArrayList<T_tile> list) {
		tmp.clear();
		ArrayList<TTT> arr = new ArrayList<>();
		int len = list.size();
		for (int i = 0; i < len; i++) {
			T_tile a = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				T_tile b = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					T_tile c = list.get(k);
					int sid = tid(a.value, b.value, c.value);
					if (!tmp.containsKey(sid)) {
						if (isGroup(a, b, c)) {
							tmp.put(sid, true);
							arr.add(new TTT(a, b, c));
						}
					}
				}
			}
		}
		return arr;
	}

	private boolean perfect(TTT[] arr) {
		tmp.clear();
		for (TTT ttt : arr) {
			if (tmp.containsKey(ttt.a.id) || tmp.containsKey(ttt.b.id) || tmp.containsKey(ttt.c.id)) {
				return false;
			}
			tmp.put(ttt.a.id, true);
			tmp.put(ttt.b.id, true);
			tmp.put(ttt.c.id, true);
		}
		this.ttts = arr;
		return true;
	}

	private boolean G2(ArrayList<TTT> list) {
		TTT[] arr = new TTT[2];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				if (perfect(arr)) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean G3(ArrayList<TTT> list) {
		TTT[] arr = new TTT[3];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					arr[2] = list.get(k);
					if (perfect(arr)) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean G4(ArrayList<TTT> list) {
		TTT[] arr = new TTT[4];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					arr[2] = list.get(k);
					for (int l = (k + 1); l < len; l++) {
						arr[3] = list.get(l);
						if (perfect(arr)) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	public boolean HU(T_tile o) {
		Vector<T_tile> array = new Vector<T_tile>(player.array);
		array.add(o);
		return HU(array);
	}

	public boolean HU() {
		return HU(player.array);
	}

	public boolean HU(Vector<T_tile> tiles) {
		ArrayList<TT> tts = TTs(tiles);
		for (TT tt : tts) {
			this.tt = tt;
			System.out.println(tt);
			ArrayList<T_tile> list = new ArrayList<>(player.array);
			list.remove(tt.a);
			list.remove(tt.b);

			num = list.size() / 3;
			if (num == 0) {
				return true;
			}

			ArrayList<TTT> ttts = TTTs(list);
			if (ttts.size() >= num) {
				switch (num) {
				case 1:
					this.ttts = new TTT[] { ttts.get(0) };
					return true;
				case 2:
					if (G2(ttts)) {
						return true;
					}
				case 3:
					if (G3(ttts)) {
						return true;
					}
				case 4:
					if (G4(ttts)) {
						return true;
					}
				}
			}

		}
		return false;
	}

	/**
	 * 杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠
	 */
	public HashMap<Byte, Vector<T_tile>> gang = new HashMap<>();
	public byte[] gangValue;

	public boolean Gang() {
		gang.clear();
		gangValue = new byte[] { 0, 0, 0 };
		byte i = 0;
		for (T_tile o : player.array) {
			Vector<T_tile> v = gang.get(o.value);
			if (v == null) {
				v = new Vector<>(4);
				gang.put(o.value, v);
			}
			v.add(o);
			if (v.size() == 4) {
				gangValue[i++] = o.value;
			}
		}
		return i > 0;
	}

	public Vector<T_tile> pangs = new Vector<T_tile>(4);

	public byte Pang(T_tile obj) {
		pangs.clear();
		for (T_tile o : player.array) {
			if (o.value == obj.value) {
				pangs.add(o);
			}
		}
		return (byte) pangs.size();
	}

	public T_tile[] chis = new T_tile[4];

	public byte Chi(T_tile obj) {
		for (int i = 0; i < chis.length; i++) {
			chis[i] = null;
		}
		for (T_tile o : player.array) {
			int t = obj.value / 10;
			switch (t) {
			case 0:// 万
			case 1:// 条
			case 2:// 筒
				for (int i = 0; i < i1.length; i++) {
					if (nearby(obj, i1[i], o)) {
						chis[i] = o;
					}
				}
				break;
			case 4:// 东南西北
				for (int i = 0; i < i1.length; i++) {
					if (nearby(obj, i1[i], 4, o)) {
						chis[i] = o;
					}
				}
				break;
			case 5:// 中发白
				for (int i = 0; i < i2.length; i++) {
					if (nearby(obj, i2[i], 3, o)) {
						chis[i] = o;
					}
				}
				break;
			}
		}
		int chi1 = chis[0] != null && chis[1] != null ? 1 : 0;
		int chi2 = chis[1] != null && chis[2] != null ? 1 : 0;
		int chi3 = chis[2] != null && chis[3] != null ? 1 : 0;
		return (byte) (chi1 << 2 | chi2 << 1 | chi3);
	}

	private boolean nearby(T_tile obj, int offset, int n, T_tile o) {
		int p = obj.value / 10;
		int g = (obj.value % 10 + offset + n) % n;
		int p2 = o.value / 10;
		int g2 = o.value % 10;
		return p == p2 && g == g2;
	}

	private boolean nearby(T_tile obj, int offset, T_tile o) {
		int p = obj.value / 10;
		int g = obj.value % 10 + offset;
		int p2 = o.value / 10;
		int g2 = o.value % 10;
		return p == p2 && g == g2;
	}

	public String toString() {
		String str = "TT:" + tt + "\nnum:" + num + "\nTTTs:\n";
		for (TTT ttt : ttts) {
			str += ttt + "\n";
		}
		return str;
	}

	public static void main(String[] args) {
		Table<T_tile> T_tile = new Table<T_tile>(T_tile.class, null);

		short id = 1;
		try {
			String STR = "➀➁➂➃➄➅➆➇➈➊➋➌➍➎➏➐➑➒㊀㊁㊂㊃㊄㊅㊆㊇㊈东南西北中发白";
			long time = System.currentTimeMillis();
			String str = "➀➀➀➃➄➅中中";
			int len = str.length();
			Vector<T_tile> tiles = new Vector<>(len);
			for (int i = 0; i < len; i++) {
				char c = str.charAt(i);
				int index = STR.indexOf(c);
				T_tile tile = new T_tile(T_tile, id++, TILE[index], (byte) 0, (byte) 0, (byte) -1);
				tiles.add(tile);
			}
			MJ mj = new MJ(null);
			System.out.println("HU:" + mj.HU(tiles));
			System.out.println(mj);

			System.out.println(System.currentTimeMillis() - time);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
