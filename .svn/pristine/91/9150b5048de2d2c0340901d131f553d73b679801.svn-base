package game.room;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Vector;

import game.application.Player;
import game.data.bean.T_tile;

public class MJ {

	public static byte[] TILE = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26,
			27, 28, 29, 31, 32, 33, 34, 41, 42, 43 };

	private HashMap<Integer, Boolean> tmp = new HashMap<>();
	public TT tt;
	private int num;
	public TTT[] ttts;
	private Player player;

	/**
	 * 霸王精=*2
	 */
	public boolean isBaWangJing;

	/**
	 * 精吊=*2+5
	 */
	public boolean isJingDiao;

	/**
	 * 德中德=*2
	 */
	public boolean isDeZhongDe;

	/**
	 * 扛上开花=*2
	 */
	public boolean isGangHua;

	/**
	 * 抢杠=*2
	 */
	public boolean isQiangGang;

	/**
	 * 七大对(11122233344455)
	 */
	public boolean isMaxSevenPairs;

	/**
	 * 德国=*2+5
	 */
	public boolean isDeGuo;

	/**
	 * 天胡
	 */
	public boolean isTianHU;

	/**
	 * 自摸
	 */
	public boolean isSelfMo;

	public MJ(Player player) {
		this.player = player;
	}

	public boolean any(T_tile a) {
		return player.room.main == a.value || player.room.vice == a.value;
	}

	public static int type(T_tile a) {
		return a.value / 10;
	}

	public static boolean loop(T_tile a) {
		return a.value > 30;
	}

	private static int tid(int... tiles) {
		Arrays.sort(tiles);
		int v = 0;
		for (int i : tiles) {
			v = v * 10 + i;
		}
		return v;
	}

	private boolean ttt(T_tile a, T_tile b) {
		if (type(a) == type(b)) {
			return Math.abs(a.value - b.value) <= 2 || loop(a);
		}
		return false;
	}

	private boolean isChi(T_tile a, T_tile b, T_tile c) {
		if (type(a) == type(b) && type(a) == type(c)) {
			if (a.value != b.value && a.value != c.value && b.value != c.value) {
				if (loop(a)) {
					return true;
				} else {
					return Math.max(a.value, Math.max(b.value, c.value)) == (a.value + b.value + c.value) / 3f + 1;
				}
			}
		}
		return false;
	}

	private boolean ttt(T_tile a, T_tile b, T_tile c) {
		if (a.value == b.value && a.value == c.value) {
			return true;
		}
		return isChi(a, b, c);
	}

	public boolean isGroup(T_tile a, T_tile b) {
		return any(a) || any(b) || a.value == b.value;
	}

	public boolean isGroup(T_tile a, T_tile b, T_tile c) {
		boolean _a = any(a);
		boolean _b = any(b);
		boolean _c = any(c);

		if (!_a && !_b && !_c) {
			return ttt(a, b, c);
		} else if (!_a && !_b && _c) {
			return ttt(a, b);
		} else if (_a && !_b && !_c) {
			return ttt(b, c);
		} else if (!_a && _b && !_c) {
			return ttt(a, c);
		} else {
			return true;
		}
	}

	private ArrayList<TT> TTs(Vector<T_tile> tiles) {
		tmp.clear();
		ArrayList<TT> arr = new ArrayList<>();
		int len = tiles.size();
		for (int i = 0; i < len; i++) {
			T_tile a = tiles.get(i);
			for (int j = i + 1; j < len; j++) {
				T_tile b = tiles.get(j);
				int sid = tid(a.value, b.value);
				if (!tmp.containsKey(sid)) {
					if (isGroup(a, b)) {
						tmp.put(sid, true);
						arr.add(new TT(a, b));
					}
				}
			}
		}
		return arr;
	}

	private ArrayList<TTT> TTTs(ArrayList<T_tile> list) {
		tmp.clear();
		ArrayList<TTT> arr = new ArrayList<>();
		int len = list.size();
		for (int i = 0; i < len; i++) {
			T_tile a = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				T_tile b = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					T_tile c = list.get(k);
					int sid = tid(a.value, b.value, c.value);
					if (!tmp.containsKey(sid)) {
						if (isGroup(a, b, c)) {
							tmp.put(sid, true);
							arr.add(new TTT(a, b, c));
						}
					}
				}
			}
		}
		return arr;
	}

	/**
	 * 去除重复搭配
	 */
	private boolean perfect(TTT[] arr) {
		tmp.clear();
		for (TTT ttt : arr) {
			if (tmp.containsKey(ttt.a.id) || tmp.containsKey(ttt.b.id) || tmp.containsKey(ttt.c.id)) {
				return false;
			}
			tmp.put(ttt.a.id, true);
			tmp.put(ttt.b.id, true);
			tmp.put(ttt.c.id, true);
		}
		this.ttts = arr;
		return true;
	}

	private boolean G2(ArrayList<TTT> list) {
		TTT[] arr = new TTT[2];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				if (perfect(arr)) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean G3(ArrayList<TTT> list) {
		TTT[] arr = new TTT[3];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					arr[2] = list.get(k);
					if (perfect(arr)) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean G4(ArrayList<TTT> list) {
		TTT[] arr = new TTT[4];
		int len = list.size();
		for (int i = 0; i < len; i++) {
			arr[0] = list.get(i);
			for (int j = (i + 1); j < len; j++) {
				arr[1] = list.get(j);
				for (int k = (j + 1); k < len; k++) {
					arr[2] = list.get(k);
					for (int l = (k + 1); l < len; l++) {
						arr[3] = list.get(l);
						if (perfect(arr)) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	// 放炮
	public byte FangPao;

	public boolean isMinSevenPairs;

	// 是否7小对
	private boolean minSevenPairs(ArrayList<TT> arr) {
		tmp.clear();
		for (TT tt : arr) {
			if (tmp.containsKey(tt.a.id) || tmp.containsKey(tt.b.id)) {
				break;
			}
			tmp.put(tt.a.id, true);
			tmp.put(tt.b.id, true);
		}
		isMinSevenPairs = tmp.size() == 14;
		return isMinSevenPairs;
	}

	// 十三烂
	public boolean isThirteenRotten;
	// 七星
	public boolean isMevius;

	/**
	 * 十三烂
	 */
	private boolean ThirteenRotten(Vector<T_tile> tiles) {
		tiles.sort(new Comparator<T_tile>() {
			public int compare(T_tile a, T_tile b) {
				return a.value - b.value;
			}
		});
		int star = 0;
		int len = tiles.size();
		for (int i = 1; i < len; i++) {
			T_tile o = tiles.get(i);
			T_tile a = tiles.get(i - 1);
			if (loop(o)) {
				star++;
				if (o.value == a.value) {
					return false;
				}
			} else {
				if (Math.abs(o.value - a.value) < 2) {
					return false;
				}
			}
		}
		isThirteenRotten = true;
		if (isThirteenRotten) {
			isMevius = star == 7;
		}

		return false;
	}

	public boolean HU(T_tile o) {
		FangPao = o.index;
		Vector<T_tile> array = new Vector<T_tile>(player.array);
		array.add(o);
		return HU(array);
	}

	public boolean HU() {
		isSelfMo = true;
		return HU(player.array);
	}

	public boolean HU(Vector<T_tile> tiles) {
		isTianHU = player.order == 0;
		if (ThirteenRotten(tiles)) {
			return true;
		}
		ArrayList<TT> tts = TTs(tiles);
		if (minSevenPairs(tts)) {
			return true;
		}
		for (TT tt : tts) {
			this.tt = tt;
			System.out.println(tt);
			ArrayList<T_tile> list = new ArrayList<>(tiles);
			list.remove(tt.a);
			list.remove(tt.b);

			num = list.size() / 3;
			if (num == 0) {
				return true;
			}

			ArrayList<TTT> ttts = TTTs(list);
			if (ttts.size() >= num) {
				switch (num) {
				case 1:
					this.ttts = new TTT[] { ttts.get(0) };
					return true;
				case 2:
					if (G2(ttts)) {
						return true;
					}
				case 3:
					if (G3(ttts)) {
						return true;
					}
				case 4:
					if (G4(ttts)) {
						return true;
					}
				}
			}

		}
		return false;
	}

	private void execute(T_tile o, byte state) {
		o.state = state;
		o.index = player.index;
		o.order = player.order;
		o.update();
	}

	public void execute() {
		if (ttts != null) {
			for (TTT ttt : ttts) {
				execute(ttt.a, (byte) 7);
				execute(ttt.b, (byte) 7);
				execute(ttt.c, (byte) 7);
				player.order++;
			}
		}
		execute(tt.a, (byte) 8);
		execute(tt.b, (byte) 8);
	}

	/**
	 * 杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠杠
	 */
	public HashMap<Byte, Vector<T_tile>> gang = new HashMap<>();
	public byte[] gangValue;

	public boolean Gang() {
		gang.clear();
		gangValue = new byte[] { 0, 0, 0 };
		byte i = 0;
		for (T_tile o : player.array) {
			Vector<T_tile> v = gang.get(o.value);
			if (v == null) {
				v = new Vector<>(4);
				gang.put(o.value, v);
			}
			v.add(o);
			if (v.size() == 4) {
				gangValue[i++] = o.value;
			}
		}
		return i > 0;
	}

	public Vector<T_tile> pangs = new Vector<T_tile>(4);

	public byte Pang(T_tile obj) {
		pangs.clear();
		pangs.add(obj);
		for (T_tile o : player.array) {
			if (o.value == obj.value) {
				pangs.add(o);
			}
		}
		return (byte) pangs.size();
	}

	public Vector<Byte> chivalue = new Vector<Byte>();
	public Vector<T_tile> chiObj = new Vector<T_tile>();

	public byte Chi(T_tile o) {
		tmp.clear();
		chivalue.clear();
		chiObj.clear();
		int len = player.array.size();
		for (int i = 0; i < len; i++) {
			T_tile a = player.array.get(i);
			for (int j = i + 1; j < len; j++) {
				T_tile b = player.array.get(j);
				int sid = tid(a.value, b.value, o.value);
				if (!tmp.containsKey(sid)) {
					if (isChi(a, b, o)) {
						tmp.put(sid, true);
						chiObj.add(a);
						chiObj.add(b);
						chiObj.add(o);
						chivalue.add(a.value);
						chivalue.add(b.value);
						chivalue.add(o.value);
					}
				}
			}
		}
		return (byte) chivalue.size();
	}

	/**
	 * 精数
	 */
	public int jing;

	/**
	 * 精计算
	 */
	public int jing() {
		player.array.addAll(player.array2);
		jing = 0;
		for (T_tile o : player.array) {
			if (o.value == player.room.main) {
				jing += 2;
			} else if (o.value == player.room.vice) {
				jing++;
			}
		}
		if (jing >= 5) {
			jing *= (jing - 3);
		}
		return jing;
	}

	/**
	 * 设置霸王精
	 */
	public void BaWangJing(int sumjing) {
		isBaWangJing = jing > 0 && jing == sumjing;
	}
}
