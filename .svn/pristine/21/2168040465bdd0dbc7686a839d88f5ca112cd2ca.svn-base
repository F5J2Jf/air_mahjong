const { ccclass, property } = cc._decorator;
import Pai from "./Pai"

@ccclass
export default class TTable extends cc.Component {

    private static data: Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 40, 41, 42]

    @property({ default: null, type: cc.SpriteAtlas })
    pa: cc.SpriteAtlas;

    @property({ default: null, type: cc.Node })
    img: cc.Node;

    @property({ default: null, type: cc.Node })
    jing: cc.Node;

    @property({ default: null, type: cc.Node })
    layout: cc.Node;

    @property({ default: null, type: [cc.Node] })
    layouts: cc.Node[] = [];

    index: number = 0;
    array = [];
    create(p: cc.Node) {
        var o: cc.Node = cc.instantiate(this.img);
        var pai: Pai = o.getComponent<Pai>(Pai);
        pai.init(this.array[this.index++], this.pa);
        p.addChild(o);
    }

    onLoad() {
        this.array = TTable.data.concat(TTable.data, TTable.data, TTable.data);

        cc.director.getCollisionManager().enabled = true;
        //cc.director.getCollisionManager().enabledDebugDraw = true;
        for (var j = 0; j < this.layouts.length; j++) {
            var p = this.layouts[j];
            for (var i = 0; i < 13; i++) {
                this.create(p);
            }
        }
        for (var i = 0; i < 83; i++) {
            this.create(this.layout);
        }
        this.create(this.jing);

        this.img.destroy();

    }

    init() {

    }

    exit() {
        this.node.destroy();
    }
}
