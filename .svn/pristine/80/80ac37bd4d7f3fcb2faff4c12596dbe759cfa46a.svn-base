package game.room;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Timer;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;

import game.application.Player;
import game.data.bean.U_room;
import game.data.bean.U_room_level;
import game.data.bean.T_state;
import game.data.bean.T_tile;
import game.room.task.DrawTile;
import game.room.task.Extractive;
import game.room.task.Perflop;
import game.room.task.StartGame;
import game.room.task.Tick;
import game.utils.Protocol;
import ge.db.Table;
import ge.net.Buffer;
import ge.net.Call;

public class Room extends Call {
	protected static ConcurrentHashMap<Integer, Room> ROOMS = new ConcurrentHashMap<Integer, Room>();

	public static Room Find(int roomId) {
		Room room = ROOMS.get(roomId);
		return room;
	}

	private synchronized static int CreataID() {
		int id = 0;
		do {
			id = (int) (100000 + Math.random() * 900000);
		} while (ROOMS.containsKey(id));
		return id;
	}

	public Timer timer = new Timer();
	public Player[] map;
	public byte curLevel = 1;
	public byte banker = 0;

	public final int code;

	public Table<T_tile> t_tile = new Table<T_tile>(T_tile.class, null);
	public Table<T_state> t_state = new Table<T_state>(T_state.class, null);
	public Table<U_room> u_room = new Table<U_room>(U_room.class, null, null);
	public Table<U_room_level> u_roomlevel = new Table<U_room_level>(U_room_level.class, null, null);

	private Vector<T_tile> array;

	public U_room room;
	/**
	 * 定时器任务
	 */
	public Tick tick;
	// 发牌
	public Perflop perflop;
	public Extractive extractive;
	public DrawTile drawTile;
	public StartGame startGame;
	public byte num;
	private int roomId;

	public Room(int userId, byte sumLevel, byte num) {
		this.code = CreataID();
		this.num = num;
		map = new Player[num];
		ROOMS.put(code, this);
		tick = new Tick(this);
		perflop = new Perflop(this);
		extractive = new Extractive(this);
		drawTile = new DrawTile(this);
		startGame = new StartGame(this);

		int time = (int) (System.currentTimeMillis() / 1000);

		room = new U_room(u_room, 0, code, userId, num, banker, (byte) -1, (byte) 0, (byte) 0, curLevel, sumLevel, (byte) 0, time);
		roomId = room.id;
		room.save();

		short id = 1;
		for (byte v : MJ.TILE) {
			for (int i = 0; i < 4; i++) {
				new T_tile(t_tile, id++, v, (byte) 0, (byte) 0, (byte) -1, (byte) 0);
			}
		}
	}

	public T_tile getTile(int id) {
		T_tile o = t_tile.get(id);
		if (o != null) {
			array.remove(o);
		} else {
			o = array.remove(0);
		}
		room.remainingTile = (short) array.size();
		room.update();
		return o;
	}

	private void shuffle() {
		array = t_tile.getList(null);
		for (T_tile o : array) {
			o.state = 0;
			o.order = (byte) (Math.random() * 127);
			o.index = -1;
			o.jing = 0;
			o.update();
		}
		array.sort(new Comparator<T_tile>() {
			public int compare(T_tile a, T_tile b) {
				return a.order - b.order;
			}
		});
	}

	public Player banker() {
		return map[banker];
	}

	private byte index() {
		for (byte i = 0; i < map.length; i++) {
			if (map[i] == null) {
				return i;
			}
		}
		return -1;
	}

	public synchronized byte into(Player player) {
		byte i = index();
		if (i >= 0) {
			map[i] = player;
			u_room.addListener(player);
			u_roomlevel.addListener(player);
			t_state.addListener(player);
			t_tile.addListener(player);
			String nickname = "txoy " + i;
			int ip = player.client().ip;
			String url = "http://mj.game1982.com/1.jpg";
			player.state = new T_state(t_state, player.userId, i, (byte) 0, nickname, ip, url);
		}
		return i;
	}

	/**
	 * 准备
	 */
	public void prepare(Player mj) {
		mj.state.state = 1;
		mj.state.update();

		for (Player p : map) {
			if (p == null || p.state.state != 1) {
				return;
			}
		}
		startGame();
	}

	private void startGame() {
		shuffle();
		room.curLevel = curLevel;
		room.banker = banker;
		room.state = 1;
		room.update();
		for (Player p : map) {
			p.state.state = 0;
			p.state.update();
		}
		call(Protocol.NCMJ_ALL_PREPARE);
		perflop.start();
	}

	/**
	 * 出牌
	 */
	public T_tile play(Player player, short id) {
		room.play = -1;
		room.update();
		tick.cancel();
		T_tile o = t_tile.get(id);
		o.state = 10;
		o.update();
		for (Player p : map) {
			if (p != player && p != null) {
				p.onPlay(o);
			}
		}
		System.out.println(o);
		return o;
	}

	/**
	 * 应牌
	 */
	public void reply() {
		Player p = null;
		boolean qiangGang = false;
		for (Player o : map) {
			if (p == null || p.pr < o.pr || p.pr == o.pr && p.dis > o.dis) {
				p = o;
			}
			if (o.pr == 4) {
				qiangGang = true;
			}
		}
		p.onReply(qiangGang);
	}

	public void exit(Player player) {
		t_state.del(player.userId);

		t_tile.removeListener(player);
		t_state.removeListener(player);
		u_room.removeListener(player);
		map[player.index] = null;
		if (player.userId == room.owner) {
			destroy();
		}
	}

	public void destroy() {
		timer.cancel();
		ROOMS.remove(code);
		for (Player p : map) {
			if (p != null) {
				p.exit((byte) 1);
			}
		}
		t_tile.clear();
		t_state.clear();
		u_room.clear();
		t_tile = null;
		t_state = null;
		u_room = null;
	}

	public void Send(Buffer buffer) {
		for (Player p : map) {
			if (p != null) {
				buffer.rewind();
				p.Send(buffer);
			}
		}
	}

	public void hu(Player player) {
		int sumJing = 0;
		for (Player p : map) {
			sumJing += p.baseJing();
		}
		int sumJing2 = 0;
		byte baWangJing = -1;
		for (Player p : map) {
			sumJing2 += p.BaWangJing(sumJing);
			if (p.baWangJing) {
				baWangJing = p.index;
			}
		}
		for (Player p : map) {
			p.syncJing(sumJing2);
		}
		ArrayList<Object> param = player.huState.statistics(sumJing2, baWangJing);
		int myScore = 0;
		for (Player p : map) {
			if (p != player) {
				int score = p.clearing(player);
				saveLevel(p, -score);
				myScore += score;
			}
		}
		saveLevel(player, myScore);
		call(Protocol.NCMJ_HU, param);
		curLevel++;
		banker = player.index;

		room.state = 0;
		room.update();
	}

	private void saveLevel(Player p, int score) {
		U_room_level roomlevel = new U_room_level(u_roomlevel, 0, p.userId, roomId, curLevel, score, p.jing, p.jingLevel);
		roomlevel.save();
	}
}