const { ccclass, property } = cc._decorator;

import Music from "../utils/Music";
import Protocol from "../net/Protocol";
import Data from "../net/Data";
import Table from "../net/Table";
import Extractive from "./Extractive";
import Reply from "../window/Reply";
import Buffer from "../net/Buffer";
import Window from "../utils/Window";
import UI from "./UI";
import Time from "./Time";
import Player from "./Player";
import EventHandle from "../net/EventHandle"
import { T_tile, T_state, U_room, U_room_level } from "../net/Bean";

@ccclass
export default class Desktop extends cc.Component {

    public static it: Desktop;

    @property({ type: [Player] })
    players: Player[] = [];
    array: Player[] = [];

    @property({ type: cc.SpriteAtlas })
    pa: cc.SpriteAtlas;

    @property({ type: cc.Prefab })
    pointer: cc.Prefab;

    index: number;
    room: U_room;
    state: T_state;
    eh: Array<EventHandle> = [];

    onLoad() {
        Desktop.it = this;
        this.index = Data.it.index;
        console.log("Desktop()================================33333");

        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_EXIT, this.onExit, this));
        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_OPTIONS, this.onOpions, this));
        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_HU, this.onHU, this));
        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_ALL_PREPARE, this.onPrepareAll, this));
        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_START, this.onStart, this));
        this.eh.push(Data.it.im.addEventListener(Protocol.NCMJ_CARD_DRAFTING, this.onCardDrafting, this));

        this.clear();

        this.room = U_room.table.getObj();
        this.state = T_state.table.getObj(this.index);

        Music.bgMusic(2);
    }

    getIndex(dir: number) {
        return (dir + this.index) % this.room.num;
    }

    /**
     * 胡牌
     */
    onHU(buffer: Buffer) {
        var size = buffer.getByte();

        var index = buffer.getByte();
        var FangPao = buffer.getByte();
        if (FangPao >= 0) {
            this.array[FangPao].showHUState(101);
        } else {
            this.array[index].showHUState(100);
        }
        var baWangJing = buffer.getByte();
        if (baWangJing >= 0) {
            this.array[baWangJing].showHUState(102);
        }
        for (var i = 3; i < size; i++) {
            var value = buffer.getByte();
            this.array[index].showHUState(value);
        }

    }

    onPrepareAll(buffer: Buffer) {
        //this.array.forEach(a => a.startGame());
    }

    onStart(buffer: Buffer) {
        this.players[0].sort();
    }

    onCardDrafting(buffer: Buffer) {
        new Window("CardDrafting");
    }

    onOpions(buffer: Buffer) {
        new Window("Reply", buffer);
    }

    onExit(buffer: Buffer) {
        var code = buffer.getByte();
        cc.director.loadScene("Hall");
    }

    clear() {
        this.players.forEach(p => p.clear());
    }

    onDestroy() {
        this.eh.forEach(eh => eh.remove());
    }
}
