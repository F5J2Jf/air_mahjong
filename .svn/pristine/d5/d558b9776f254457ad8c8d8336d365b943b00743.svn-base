const { ccclass, property } = cc._decorator;

import Global from "../utils/Global";
import Protocol from "../net/Protocol";
import Data from "../net/Data";
import Table from "../net/Table";
import Player from "./Player";
import Extractive from "./Extractive";
import Reply from "./Reply"

@ccclass
export default class Desktop extends cc.Component {


    @property(cc.Label)
    RoomId: cc.Label;
    @property(cc.Node)
    PrepareBtn: cc.Node;
    @property(cc.Node)
    playTips: cc.Node;

    @property([Player])
    players: Player[] = [];
    array: Player[] = [];

    @property(cc.SpriteAtlas)
    pa: cc.SpriteAtlas;

    @property(Extractive)
    extractive: Extractive;

    @property(Reply)
    reply: Reply;

    @property(cc.Label)
    time: cc.Label;

    t_brand: Table;
    t_state: Table;
    t_room: Table;

    roomId: number;
    room: any;

    onLoad() {
        Global.PA = this.pa;

        this.t_room = Data.it.Table("T_room");
        this.t_brand = Data.it.Table("T_brand");
        this.t_state = Data.it.Table("T_state");

        this.t_brand.event.on("update", this.onBrand, this);
        this.t_state.event.on("insert", this.onState, this);
        this.t_state.event.on("update", this.onState, this);
        this.t_room.event.on("update", this.onRoom, this);

        this.room = this.t_room.getObj(this.roomId);
        if (this.room.num == 3) {
            this.players.splice(2, 1);
        }

        var state = this.t_state.getObj(Data.it.userId);
        for (var i = 0; i < this.room.num; i++) {
            this.array[(i + state.index) % this.room.num] = this.players[i];
        }

        var arr = this.t_state.getList();
        arr.forEach(this.State.bind(this));

        //var array = this.t_brand.getList(o => o.value == 9);
    }

    onRoom(event: cc.Event.EventCustom) {
        this.time.string = this.room.time;
        var p = this.array[this.room.play]
        if (p) {
            this.playTips.active = true;
            this.playTips.rotation = this.array[this.room.play].azimuth;
        } else {
            this.playTips.active = false;
        }
    }

    onBrand(event: cc.Event.EventCustom) {
        var o = event.detail;
        if (o.index == 5) {
            this.extractive.obj(o);
        } else {
            this.array[o.index].Brand(event.detail);
        }
    }

    onState(event: cc.Event.EventCustom) {
        this.State(event.detail);
    }

    State(o) {
        if (o.userId == Data.it.userId) {//准备按钮
            this.PrepareBtn.active = o.state == 0;
        }
        this.players[o.index].state(o);
    }

    init(param: any[]) {
        this.roomId = param[0];
        this.RoomId.string = param[0];
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },

    prepare() {
        Data.it.im.Call(Protocol.NCMJ_PREPARE);
    }

    play() {

    }


    onExit(event) {
        var code = event.detail.getByte();
        if (code == 0) {
            cc.director.loadScene("Hall");
        }
    }

    exit() {
        Data.it.im.Call(Protocol.NCMJ_EXIT, this.onExit, this);
    }
}
